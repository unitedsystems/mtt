package engine

import "sync"

// Чат  Создать прототип системы, котороя позволит общаться нескольким людям через специальные CLI [1] приложения.
// Задача требует реализации двух подсистем.
//
// Подсистема #1 —сервер, который позволит создавать "комнаты" (room) для обмена текстовыми сообщениями,
//   длина каждого сообщения не должна превышать 254 байта,
//   кол-во сообщений в room не должно превышать 128 — история “Комнаты”
//   (СУБД не использовать все in-memory).
// Подсистема #2 — "клиент", который позволит "публиковать" (publish) сообщения в определенные "комнаты" и,
//   который позволит подписываться (subscribe) на определенные комнаты.
//   ”Комнаты” полностью изолированны друг от друга, т.е. клиенты могут взаимодействовать только с “комнатами”,
//   на которые они были подписаны ранее — список таких комнат задается в файле конфигурации или через CLI[1]..
//   Подсистемы имеют ряд ограничений и свойств:
//     - Клиент должен получать историю каждой комнаты при успешном подключение.
//     - Каждый клиент должен иметь имя, имена должны быть уникальными в рамках “комнаты”.
//     Клиент сообщает свое имя клиент при “подписание” на определеную “комнату”.
// - Сервер и клиент — это консольные приложения, которые могут иметь либо файл конфигурации либо все опции
//    передаются через CLI [1].
//
//
// Ожидаемый результат
// 2) DFD описывающая взаимодействие клиента и сервера.
// 3) Дорожная карта развитие системы, в которой будут ответы на вопросы:
//   3.1) Как масштабировать систему?
//   3.2) Как обеспечить HA(высокая доступность) и отказоустойчивость системы?
//   3.3) Как выбрать правильную СУБД для хранения истории сообщений за 1 год?

type server struct {
	sync.RWMutex
	rooms map[string]*room
}

func (s *server) getRoom(name string) *room {
	s.Lock()
	if _, ok := s.rooms[name]; !ok {
		s.rooms[name] = newRoom(name)
	}
	s.Unlock()
	return s.rooms[name]
}

func newServer() *server {
	return &server{
		rooms: make(map[string]*room),
	}
}
